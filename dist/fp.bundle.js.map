{"version":3,"file":"fp.bundle.js","mappings":"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","sources":["webpack://fauxpas/./node_modules/js-cookie/dist/js.cookie.mjs","webpack://fauxpas/./src/lib/dom.js","webpack://fauxpas/./src/components/cookie.js","webpack://fauxpas/./src/components/params.js","webpack://fauxpas/./src/components/validation.js"],"sourcesContent":["/*! js-cookie v3.0.1 | MIT */\n/* eslint-disable no-var */\nfunction assign (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      target[key] = source[key];\n    }\n  }\n  return target\n}\n/* eslint-enable no-var */\n\n/* eslint-disable no-var */\nvar defaultConverter = {\n  read: function (value) {\n    if (value[0] === '\"') {\n      value = value.slice(1, -1);\n    }\n    return value.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent)\n  },\n  write: function (value) {\n    return encodeURIComponent(value).replace(\n      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,\n      decodeURIComponent\n    )\n  }\n};\n/* eslint-enable no-var */\n\n/* eslint-disable no-var */\n\nfunction init (converter, defaultAttributes) {\n  function set (key, value, attributes) {\n    if (typeof document === 'undefined') {\n      return\n    }\n\n    attributes = assign({}, defaultAttributes, attributes);\n\n    if (typeof attributes.expires === 'number') {\n      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);\n    }\n    if (attributes.expires) {\n      attributes.expires = attributes.expires.toUTCString();\n    }\n\n    key = encodeURIComponent(key)\n      .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n      .replace(/[()]/g, escape);\n\n    var stringifiedAttributes = '';\n    for (var attributeName in attributes) {\n      if (!attributes[attributeName]) {\n        continue\n      }\n\n      stringifiedAttributes += '; ' + attributeName;\n\n      if (attributes[attributeName] === true) {\n        continue\n      }\n\n      // Considers RFC 6265 section 5.2:\n      // ...\n      // 3.  If the remaining unparsed-attributes contains a %x3B (\";\")\n      //     character:\n      // Consume the characters of the unparsed-attributes up to,\n      // not including, the first %x3B (\";\") character.\n      // ...\n      stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];\n    }\n\n    return (document.cookie =\n      key + '=' + converter.write(value, key) + stringifiedAttributes)\n  }\n\n  function get (key) {\n    if (typeof document === 'undefined' || (arguments.length && !key)) {\n      return\n    }\n\n    // To prevent the for loop in the first place assign an empty array\n    // in case there are no cookies at all.\n    var cookies = document.cookie ? document.cookie.split('; ') : [];\n    var jar = {};\n    for (var i = 0; i < cookies.length; i++) {\n      var parts = cookies[i].split('=');\n      var value = parts.slice(1).join('=');\n\n      try {\n        var foundKey = decodeURIComponent(parts[0]);\n        jar[foundKey] = converter.read(value, foundKey);\n\n        if (key === foundKey) {\n          break\n        }\n      } catch (e) {}\n    }\n\n    return key ? jar[key] : jar\n  }\n\n  return Object.create(\n    {\n      set: set,\n      get: get,\n      remove: function (key, attributes) {\n        set(\n          key,\n          '',\n          assign({}, attributes, {\n            expires: -1\n          })\n        );\n      },\n      withAttributes: function (attributes) {\n        return init(this.converter, assign({}, this.attributes, attributes))\n      },\n      withConverter: function (converter) {\n        return init(assign({}, this.converter, converter), this.attributes)\n      }\n    },\n    {\n      attributes: { value: Object.freeze(defaultAttributes) },\n      converter: { value: Object.freeze(converter) }\n    }\n  )\n}\n\nvar api = init(defaultConverter, { path: '/' });\n/* eslint-enable no-var */\n\nexport default api;\n","/* eslint-disable no-param-reassign */\n/**\n * Dom related methods\n */\nclass Dom {\n    /**\n     * Query selector\n     *\n     * @param {string} query Dom query string\n     * @returns {Element}\n     */\n    static q(query) {\n        return document.querySelector(query)\n    }\n\n    /**\n     * Query selector all\n     *\n     * @param {string} query Dom query string\n     * @returns {NodeList}\n     */\n    static qall(query) {\n        return document.querySelectorAll(query)\n    }\n\n    /**\n     * Updates a HTML element value or text\n     *\n     * @param {HTMLElement} elem\n     * @param {*} value\n     */\n    static setValue(elem, value) {\n        if (!elem) return\n\n        switch (elem.tagName) {\n            case 'INPUT':\n                this.input.setValue(elem, value)\n                break\n\n            default:\n                elem.innerText = value\n                break\n        }\n    }\n\n    static input = class {\n        /**\n         * Set value on input field. Handles checkbox and radio\n         * buttons with click instead of updating value only\n         *\n         * @param {HTMLInputElement} input\n         * @param {any} value\n         */\n        static setValue(input, value) {\n            if (!input) return\n\n            switch (input.type) {\n                case 'radio':\n                    // Find the element to be checked within the same radio group name\n                    this.radio.setValue(input.name, value)\n                    break\n                case 'checkbox':\n                    input.checked = false\n                    input.click()\n                    break\n                default:\n                    input.value = value\n                    break\n            }\n        }\n\n        /**\n         * Get value from HTML input element\n         *\n         * @param {HTMLElement} input\n         * @returns {any}\n         */\n        // eslint-disable-next-line consistent-return\n        static getValue(input) {\n            if (input)\n                switch (input.type) {\n                    case 'radio':\n                        return this.radio.getValue(input.name)\n                    case 'checkbox':\n                        return input.checked\n                    default:\n                        return input.value\n                }\n        }\n\n        static radio = class {\n            /**\n             * Check a value in a radio button group\n             * For some wierd reason click() does not add decoration to input as if it was\n             * clicked\n             *\n             * @param {string} radioName\n             * @param {string} value\n             */\n            static setValue(radioName, value) {\n                const radio = Dom.q(`input[name=\"${radioName}\"][value=\"${value}\"]`)\n                radio.checked &&= false\n\n                // Voodoo to make the click also apply the correct classes\n                setTimeout(() => radio?.click(), 300)\n            }\n\n            static getValue(radioName) {\n                return Dom.q(`input[name=\"${radioName}\"]:checked`)?.value\n            }\n        }\n    }\n}\n\nconst dom = Dom\n\nexport default dom\n","import Cookies from 'js-cookie'\nimport dom from '../lib/dom'\n\nclass FpCookie {\n    static STORE = '__fp_store'\n\n    /**\n     * Store a cookie\n     *\n     * @param {string} name\n     * @param {any} value\n     */\n    static set(name, value) {\n        const { store } = this\n        store[name] = value\n        Cookies.set(this.STORE, JSON.stringify(store), { secure: true, sameSite: 'strict' })\n    }\n\n    /**\n     * Return a cookie from store\n     *\n     * @param {string} name\n     * @returns {any}\n     */\n    static get(name) {\n        return this.store?.[name]\n    }\n\n    /**\n     * Delete a cookie\n     */\n    static clear() {\n        Cookies.remove(this.STORE)\n    }\n\n    static get store() {\n        const store = Cookies.get(this.STORE)\n        return store ? JSON.parse(store) : {}\n    }\n}\n\n/**\n * Read all fp-ccokie inputs on form and store in a cookie\n *\n * @param {HTMLFormElement} form\n */\nconst cookiesLoad = form => {\n    // Read all inputs submited\n    form.querySelectorAll('input[data-fp-cookie]').forEach(\n        /**\n         * @type {HTMLInputElement}\n         */\n        input => {\n            const cookieName = input.getAttribute('data-fp-cookie')\n            const value = dom.input.getValue(input)\n            FpCookie.set(cookieName, value)\n        }\n    )\n}\n\n/**\n * Retrieve stored cookies and write into data-fp-cookie tagged elements\n */\nconst cookiesUnload = () => {\n    dom.qall('[data-fp-cookie]').forEach(\n        /**\n         * @param {HTMLElement} elem\n         */\n        elem => {\n            const cookieName = elem.getAttribute('data-fp-cookie')\n            const value = FpCookie.get(cookieName)\n            value && dom.setValue(elem, value)\n        }\n    )\n}\n\n/**\n * Store all submited input with data-fp-cookie attribute\n *\n * @param {Event} event\n */\nconst onSubmit = event => {\n    // Submitter is the input button type=submit\n    cookiesLoad(event.submitter.form)\n\n    // Also update existing elements\n    // FIXME: does not work\n    // cookiesUnload()\n}\n\n/**\n * Load cookies into variables and load set them\n * whenever a form is submited\n */\ndom.qall('form').forEach(f => {\n    // eslint-disable-next-line no-param-reassign\n    f.addEventListener('submit', onSubmit, true)\n})\ncookiesUnload()\n","import dom from '../lib/dom'\n\n/**\n * Handles URL changes\n * Set parameters in input fields with attributes\n * fp-param : paramName\n *\n * Ex: acme.con/food?include-cat=true\n * It will search for an input field with attribute fp-param = include-cat\n * and set its value to true\n */\nconst onHashChange = () => {\n    // Split to remove # from location.hash\n    // eslint-disable-next-line no-restricted-globals\n    const params = new URLSearchParams(location.search || location.hash.split('?')?.[1])\n\n    params.forEach((value, key) => {\n        /**\n         * @type {HTMLInputElement}\n         */\n        const input = dom.q(`input[data-fp-param=\"${key}\"]`)\n        dom.input.setValue(input, value)\n    })\n}\n\nwindow.addEventListener('hashchange', onHashChange)\nwindow.addEventListener('load', onHashChange)\n","import dom from '../lib/dom'\n\n/**\n * Slice input if maxlength is reached\n *\n * @param {InputEvent} e\n */\nconst maxLength = e => {\n    const input = e.target\n    const { value } = input\n    const { maxLength: max } = input\n    if (value > max) input.value = value.slice(0, max)\n}\n\n/**\n * Remove all input that does not match inputMode\n *\n * @param {InputEvent} e\n */\nconst inputMode = e => {\n    const input = e.target\n    const { value } = input\n\n    switch (input.inputMode) {\n        case 'numeric':\n            input.value = value.replace(/\\D/g, '')\n            break\n        default:\n            break\n    }\n}\n\n/**\n * Add event listners for input fields with\n * data-fp-validation\n *\n * Possible values\n *  maxlength: will strip input if maxlength is reached\n *  inputmode: will only allow input of type specified on inputmode\n */\nconst setupWatchers = () => {\n    /**\n     * Setup watcher for input\n     *\n     * @param {HTMLInputElement} input\n     */\n    const setupInput = input => {\n        const validations = input.getAttribute('data-fp-validation')?.split(',')\n\n        // Only setup if dependend attribute is found\n        validations.forEach(v => {\n            const validators = {\n                maxlength: maxLength,\n                inputmode: inputMode\n            }\n\n            input.getAttribute(v) && input.addEventListener('input', validators[v], true)\n        })\n    }\n\n    dom.qall('input[data-fp-validation]').forEach(input => setupInput(input))\n}\n\nwindow.addEventListener('load', setupWatchers)\n"],"names":["target","i","arguments","length","source","key","api","init","converter","defaultAttributes","set","value","attributes","document","expires","Date","now","toUTCString","encodeURIComponent","replace","decodeURIComponent","escape","stringifiedAttributes","attributeName","split","cookie","write","Object","create","get","cookies","jar","parts","slice","join","foundKey","read","e","remove","withAttributes","this","withConverter","freeze","path","Dom","query","querySelector","querySelectorAll","elem","tagName","input","setValue","innerText","type","radio","name","checked","click","getValue","radioName","q","setTimeout","FpCookie","store","Cookies","STORE","JSON","stringify","secure","sameSite","parse","onSubmit","event","submitter","form","forEach","cookieName","getAttribute","dom","f","addEventListener","onHashChange","URLSearchParams","location","search","hash","window","maxLength","max","inputMode","validations","v","validators","maxlength","inputmode","setupInput"],"sourceRoot":""}